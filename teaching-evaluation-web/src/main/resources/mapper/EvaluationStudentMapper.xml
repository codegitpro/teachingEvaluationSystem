<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geqian.evalution.teachingevalution.mapper.EvaluationStudentMapper">

    <resultMap id="BaseResultMap" type="com.geqian.evalution.teachingevalution.entity.EvaluationStudent">
            <id property="evaluationstuId" column="evaluationstu_id" jdbcType="INTEGER"/>
            <result property="studentId" column="student_id" jdbcType="INTEGER"/>
            <result property="teacherId" column="teacher_id" jdbcType="INTEGER"/>
            <result property="courseId" column="course_id" jdbcType="INTEGER"/>
            <result property="score" column="score" jdbcType="INTEGER"/>
            <result property="comment" column="comment" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        student_id,teacher_id,
        course_id,score,comment,create_time,
        update_time
    </sql>

    <insert id="insertIfNotExist">
        insert into evaluation_student (<include refid="Base_Column_List"></include>)
        values (#{studentId},#{teacherId},#{courseId},#{score},#{comment},#{createTime},#{updateTime})
        on duplicate key update create_time = #{createTime},update_time = #{updateTime},score = #{score},comment = #{comment}
    </insert>

    <select id="selectOne" resultType="com.geqian.evalution.teachingevalution.entity.EvaluationStudent">
        select * from evaluation_student
        limit 1
    </select>
    <select id="selectEvaluationStudentList"
            resultType="com.geqian.evalution.teachingevalution.common.vo.EvaluationStudentVo">
        select si.std_id as studentId, si.std_name as studentName, ci.cos_id as courseId, ci.cos_name as courseName,
               ti.th_id as teacherId, ti.th_name as teacherName
        from student_info si
        inner join course_student cs on cs.student_id = si.std_id
        inner join course_info ci on ci.cos_id = cs.course_id
        inner join course_teacher ct on ct.course_id = ci.cos_id
        inner join teacher_info ti on ti.th_id = ct.teacher_id
        <where>
            <if test="studentName != null and studentName != '' ">
                and si.std_name like concat('%',#{studentName},'%')
            </if>
            <if test="studentId != null and studentId != '' ">
                and cs.student_id = #{studentId}
            </if>
            <if test="teacherName != null and teacherName != '' ">
                and ti.th_name like concat('%',#{teacherName},'%')
            </if>
            <if test="teacherId != null and teacherId != '' ">
                and ct.teacher_id = #{teacherId}
            </if>
            <if test="courseName != null and courseName != '' ">
                and ci.cos_name like concat('%',#{courseName},'%')
            </if>
        </where>
    </select>
</mapper>
